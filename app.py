# -*- coding: utf-8 -*-
"""ChatBot.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1E_EvdTJSSTSLXkzSZJ6jbMM-VuALtAgz
"""
import pymongo
import streamlit as st
from dotenv import load_dotenv
import os
import getpass
import pandas as pd
from langchain.prompts import PromptTemplate
from langchain_google_genai import ChatGoogleGenerativeAI
from langchain.chains import LLMChain
from datetime import datetime
import re


# Carrega as variÃ¡veis do arquivo .env
load_dotenv()

senha = os.getenv("MONGO_PASSWORD")

client_mongo = pymongo.MongoClient(f"mongodb+srv://adm:340340casa@aulamongo01.ihl4f.mongodb.net/?retryWrites=true&w=majority&appName=AulaMongo01")
db=client_mongo.Mydb




api="AIzaSyB0yC8yWBpdbifI22JyHGxR6enhFjyThms"

Frota_Carros=pd.read_csv("frota_carros.csv")

st.set_page_config(page_title="Sistema de Aluguel", page_icon="ðŸš—") #Nome da pagina






def nome_valido(nome):
    return bool(re.match("^[A-Za-zÃ€-Ã–Ã˜-Ã¶Ã¸-Ã¿ '-]+$", nome))




st.sidebar.title("ðŸš— Menu") #Menu lateral

menu = st.sidebar.selectbox("Escolha uma opÃ§Ã£o", [
    "Cadastro de Cliente",
    "Consultar Carros",
    "Reservar Carro",
    "Consultar Reserva",
    "Chatbot Atendimento"
])

# --- Cadastro ---
if menu == "Cadastro de Cliente":
    st.title("ðŸ§¾ Cadastro de Cliente")

    with st.form("cadastro_form"):
        nome = st.text_input("Primeiro Nome")
        sobrenome = st.text_input("Sobrenome")
        idade = st.number_input("Idade", min_value=0)
        tipo_registro = st.text_input("CPF (11 dÃ­gitos) ou CNPJ (14)")
        telefone = st.text_input("Telefone (11 dÃ­gitos)")
        cnh = st.text_input("CNH (11 dÃ­gitos)")
        validade_cnh = st.date_input("Validade da CNH")

        envio = st.form_submit_button("Cadastrar")

    if envio:
        entrada = "CPF" if len(tipo_registro) == 11 else "CNPJ"
        documento = tipo_registro.strip()
        documento = documento.replace(".", "").replace("-", "").replace("/", "")
        if not nome_valido(nome) or not nome_valido(sobrenome):
            st.error("Nome ou sobrenome invÃ¡lido.")
        else:
            documento_cliente = {
                "Nome": nome.capitalize(),
                "Sobrenome": sobrenome.capitalize(),
                "Idade": idade,
                entrada: documento,
                "Telefone": telefone,
                "CNH": cnh,
                "Validade CNH": validade_cnh.strftime("%d/%m/%Y")
            }

            # Verifica duplicatas
            if db["clientes"].find_one({"Nome": nome.capitalize(), "Sobrenome": sobrenome.capitalize()}):
                st.warning("Cliente jÃ¡ cadastrado.")
            elif db["clientes"].find_one({entrada: documento}):
                st.warning(f"{entrada} jÃ¡ cadastrado.")
            else:
                db["clientes"].insert_one(documento_cliente)
                st.success("Cadastro realizado com sucesso!")

# --- Consulta de Carros ---
elif menu == "Consultar Carros":
    st.title("ðŸš™ Carros DisponÃ­veis")
    carros = list(db["frota"].find({"Status": "DisponÃ­vel"}))
    if carros:
        df_carros = pd.DataFrame(carros).drop("_id", axis=1) #remover a coluna id
        df_carros=df_carros.drop("Carro",axis=1)
        st.dataframe(df_carros) #retorna uma tabela interativa na web
    else:
        st.warning("Nenhum carro disponÃ­vel no momento.")

# --- Reserva de Carro ---
elif menu == "Reservar Carro":
    st.title("ðŸ“… Reservar Carro")

    nome = st.text_input("Nome do cliente")
    doc = st.text_input("CPF ou CNPJ")
    tipo_busca = st.selectbox("Buscar carro por:", ["Categoria", "Marca", "Modelo"])
    valor = st.text_input(f"Digite a {tipo_busca.lower()}")

    if st.button("Reservar"):
        cliente = db["clientes"].find_one({"Nome": nome.capitalize(), "$or": [{"CPF": doc}, {"CNPJ": doc}]})
        if not cliente:
            st.error("Cliente nÃ£o encontrado.")
        else:
            filtro = {tipo_busca: {"$regex": valor, "$options": "i"}, "Status": "DisponÃ­vel"}
            carro = db["frota"].find_one(filtro)
            if carro:
                db["frota"].update_one({"Placa": carro["Placa"]}, {"$set": {"Status": "Alugado"}})
                db["reservas"].insert_one({
                    "nome_cliente": nome.capitalize(),
                    "documento": doc,
                    "placa": carro["Placa"],
                    "status": "Reservado",
                    "carro": {
                        "Marca": carro["Marca"],
                        "Modelo": carro["Modelo"],
                        "Ano": carro["Ano"],
                        "Categoria": carro["Categoria"]
                    }
                })
                st.success(f"Reserva realizada para o carro {carro['Marca']} {carro['Modelo']}!")
            else:
                st.warning("Nenhum carro disponÃ­vel com esse critÃ©rio.")

# --- Consulta de Reserva ---
elif menu == "Consultar Reserva":
    st.title("ðŸ”Ž Consulta de Reserva")
    nome = st.text_input("Nome do cliente para consulta")
    if st.button("Consultar"):
        reserva = db["reservas"].find_one({"nome_cliente": nome.capitalize()})
        if reserva:
            st.success(f"Reserva encontrada!\nStatus: {reserva['status']}")
            st.write(f"Placa do carro: {reserva['placa']}")
        else:
            st.warning("Reserva nÃ£o encontrada.")

# --- Chatbot ---
elif menu == "Chatbot Atendimento":
    st.title("ðŸ’¬ Atendimento Virtual")


    dados_csv = Frota_Carros.to_csv(index=False)

    if "chat_history" not in st.session_state: 
        st.session_state.chat_history = []

    user_input = st.text_input("VocÃª:", "")

    if st.button("Enviar") and user_input:
        # Prompt
        template = """
        VocÃª Ã© um assistente virtual de uma locadora de veÃ­culos.
        Baseie suas respostas nas informaÃ§Ãµes da frota abaixo (formato CSV):

        {dados_csv}

        Mantenha o contexto da conversa.

        UsuÃ¡rio: {pergunta}
        """

        prompt = PromptTemplate(
            input_variables=["dados_csv", "pergunta"],
            template=template
        )

        llm = ChatGoogleGenerativeAI(
            model="gemini-2.0-flash",
            temperature=0.7,
            google_api_key=api
        )

        chain = LLMChain(llm=llm, prompt=prompt)

        contexto = "\n".join([f"UsuÃ¡rio: {p}\nAssistente: {r}" for p, r in st.session_state.chat_history])
        pergunta_formatada = f"{contexto}\nUsuÃ¡rio: {user_input}" if contexto else user_input

        resposta = chain.run(dados_csv=dados_csv, pergunta=pergunta_formatada)
        st.session_state.chat_history.append((user_input, resposta.strip()))

    for p, r in st.session_state.chat_history[::-1]:
        st.markdown(f"**VocÃª:** {p}")
        st.markdown(f"**ðŸ¤– Assistente:** {r}")

